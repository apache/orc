# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

diff --git a/CMakeLists.txt b/CMakeLists.txt
index de0869dc7..df66939c4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt 
@@ -68,6 +68,10 @@ option(BUILD_POSITION_INDEPENDENT_LIB
     "Compile static libraries with position independent code"
     OFF)
 
+option(ORC_PACKAGE_KIND
+    "Arbitrary string that identifies the kind of package"
+    "")
+
 # Make sure that a build type is selected
 if (NOT CMAKE_BUILD_TYPE)
   message(STATUS "No build type selected, default to ReleaseWithDebugInfo")

diff --git a/cmake_modules/ThirdpartyToolchain.cmake b/cmake_modules/ThirdpartyToolchain.cmake
index a394d7315..3cd3e9faa 100644
--- a/cmake_modules/ThirdpartyToolchain.cmake
+++ b/cmake_modules/ThirdpartyToolchain.cmake
@@ -71,7 +71,7 @@ endif ()
 # ----------------------------------------------------------------------
 # Snappy
 
-if (NOT "${SNAPPY_HOME}" STREQUAL "")
+if (NOT "${SNAPPY_HOME}" STREQUAL "" OR ORC_PACKAGE_KIND STREQUAL "conan")
   find_package (Snappy REQUIRED)
   set(SNAPPY_VENDORED FALSE)
 else ()
@@ -97,12 +97,18 @@ endif ()
 
 add_library (orc_snappy INTERFACE)
 add_library (orc::snappy ALIAS orc_snappy)
-if (ORC_PREFER_STATIC_SNAPPY AND ${SNAPPY_STATIC_LIB})
+if (ORC_PACKAGE_KIND STREQUAL "conan")
+  target_link_libraries(orc_snappy INTERFACE ${Snappy_LIBRARIES})
+elseif (ORC_PREFER_STATIC_SNAPPY AND ${SNAPPY_STATIC_LIB})
   target_link_libraries(orc_snappy INTERFACE ${SNAPPY_STATIC_LIB})
 else ()
   target_link_libraries(orc_snappy INTERFACE ${SNAPPY_LIBRARY})
 endif ()
-target_include_directories (orc_snappy SYSTEM INTERFACE ${SNAPPY_INCLUDE_DIR})
+if (ORC_PACKAGE_KIND STREQUAL "conan")
+  target_include_directories (orc_snappy SYSTEM INTERFACE ${Snappy_INCLUDE_DIR})
+else()
+  target_include_directories (orc_snappy SYSTEM INTERFACE ${SNAPPY_INCLUDE_DIR})
+endif ()
 
 if (SNAPPY_VENDORED)
   add_dependencies (orc_snappy snappy_ep)
@@ -115,7 +121,7 @@ endif ()
 # ----------------------------------------------------------------------
 # ZLIB
 
-if (NOT "${ZLIB_HOME}" STREQUAL "")
+if (NOT "${ZLIB_HOME}" STREQUAL "" OR ORC_PACKAGE_KIND STREQUAL "conan")
   find_package (ZLIB REQUIRED)
   set(ZLIB_VENDORED FALSE)
 else ()
@@ -149,7 +155,9 @@ endif ()
 
 add_library (orc_zlib INTERFACE)
 add_library (orc::zlib ALIAS orc_zlib)
-if (ORC_PREFER_STATIC_ZLIB AND ${ZLIB_STATIC_LIB})
+if (ORC_PACKAGE_KIND STREQUAL "conan")
+  target_link_libraries (orc_zlib INTERFACE ${ZLIB_LIBRARIES})
+elseif (ORC_PREFER_STATIC_ZLIB AND ${ZLIB_STATIC_LIB})
   target_link_libraries (orc_zlib INTERFACE ${ZLIB_STATIC_LIB})
 else ()
   target_link_libraries (orc_zlib INTERFACE ${ZLIB_LIBRARY})
@@ -167,7 +175,7 @@ endif ()
 # ----------------------------------------------------------------------
 # Zstd
 
-if (NOT "${ZSTD_HOME}" STREQUAL "")
+if (NOT "${ZSTD_HOME}" STREQUAL "" OR ORC_PACKAGE_KIND STREQUAL "conan")
   find_package (ZSTD REQUIRED)
   set(ZSTD_VENDORED FALSE)
 else ()
@@ -208,12 +216,18 @@ endif ()
 
 add_library (orc_zstd INTERFACE)
 add_library (orc::zstd ALIAS orc_zstd)
-if (ORC_PREFER_STATIC_ZSTD AND ${ZSTD_STATIC_LIB})
+if (ORC_PACKAGE_KIND STREQUAL "conan")
+  target_link_libraries (orc_zstd INTERFACE ${zstd_LIBRARIES})
+elseif (ORC_PREFER_STATIC_ZSTD AND ${ZSTD_STATIC_LIB})
   target_link_libraries (orc_zstd INTERFACE ${ZSTD_STATIC_LIB})
 else ()
   target_link_libraries (orc_zstd INTERFACE ${ZSTD_LIBRARY})
 endif ()
-target_include_directories (orc_zstd SYSTEM INTERFACE ${ZSTD_INCLUDE_DIR})
+if (ORC_PACKAGE_KIND STREQUAL "conan")
+  target_include_directories (orc_zstd SYSTEM INTERFACE ${zstd_INCLUDE_DIR})
+else()
+  target_include_directories (orc_zstd SYSTEM INTERFACE ${ZSTD_INCLUDE_DIR})
+endif ()
 
 if (ZSTD_VENDORED)
   add_dependencies (orc_zstd zstd_ep)
@@ -226,7 +240,7 @@ endif ()
 # ----------------------------------------------------------------------
 # LZ4
 
-if (NOT "${LZ4_HOME}" STREQUAL "")
+if (NOT "${LZ4_HOME}" STREQUAL "" OR ORC_PACKAGE_KIND STREQUAL "conan")
   find_package (LZ4 REQUIRED)
   set(LZ4_VENDORED FALSE)
 else ()
@@ -260,12 +274,18 @@ endif ()
 
 add_library (orc_lz4 INTERFACE)
 add_library (orc::lz4 ALIAS orc_lz4)
-if (ORC_PREFER_STATIC_LZ4 AND ${LZ4_STATIC_LIB})
+if (ORC_PACKAGE_KIND STREQUAL "conan")
+  target_link_libraries (orc_lz4 INTERFACE ${lz4_LIBRARIES})
+elseif (ORC_PREFER_STATIC_LZ4 AND ${LZ4_STATIC_LIB})
   target_link_libraries (orc_lz4 INTERFACE ${LZ4_STATIC_LIB})
 else ()
   target_link_libraries (orc_lz4 INTERFACE ${LZ4_LIBRARY})
 endif ()
-target_include_directories (orc_lz4 SYSTEM INTERFACE ${LZ4_INCLUDE_DIR})
+if (ORC_PACKAGE_KIND STREQUAL "conan")
+  target_include_directories (orc_lz4 SYSTEM INTERFACE ${lz4_INCLUDE_DIR})
+else()
+  target_include_directories (orc_lz4 SYSTEM INTERFACE ${LZ4_INCLUDE_DIR})
+endif ()
 
 if (LZ4_VENDORED)
   add_dependencies (orc_lz4 lz4_ep)
@@ -377,7 +397,7 @@ endif ()
 # ----------------------------------------------------------------------
 # Protobuf
 
-if (NOT "${PROTOBUF_HOME}" STREQUAL "")
+if (NOT "${PROTOBUF_HOME}" STREQUAL "" OR ORC_PACKAGE_KIND STREQUAL "conan")
   find_package (Protobuf REQUIRED)
   set(PROTOBUF_VENDORED FALSE)
 else ()
@@ -426,14 +446,23 @@ add_library (orc::protobuf ALIAS orc_protobuf)
 add_library (orc_protoc INTERFACE)
 add_library (orc::protoc ALIAS orc_protoc)
 
-if (ORC_PREFER_STATIC_PROTOBUF AND ${PROTOBUF_STATIC_LIB})
+if (ORC_PACKAGE_KIND STREQUAL "conan")
+  target_link_libraries (orc_protobuf INTERFACE ${protobuf_LIBRARIES})
+elseif (ORC_PREFER_STATIC_PROTOBUF AND ${PROTOBUF_STATIC_LIB})
   target_link_libraries (orc_protobuf INTERFACE ${PROTOBUF_STATIC_LIB})
 else ()
   target_link_libraries (orc_protobuf INTERFACE ${PROTOBUF_LIBRARY})
 endif()
-target_include_directories (orc_protobuf SYSTEM INTERFACE ${PROTOBUF_INCLUDE_DIR})
+if (ORC_PACKAGE_KIND STREQUAL "conan")
+  target_include_directories (orc_protobuf SYSTEM INTERFACE ${protobuf_INCLUDE_DIR})
+else ()
+  target_include_directories (orc_protobuf SYSTEM INTERFACE ${PROTOBUF_INCLUDE_DIR})
+endif ()
 
-if (ORC_PREFER_STATIC_PROTOBUF AND ${PROTOC_STATIC_LIB})
+if (ORC_PACKAGE_KIND STREQUAL "conan")
+  cmake_path(GET protobuf_INCLUDE_DIR PARENT_PATH PROTOBUF_HOME)
+  set(PROTOBUF_EXECUTABLE ${PROTOBUF_HOME}/bin/protoc)
+elseif (ORC_PREFER_STATIC_PROTOBUF AND ${PROTOC_STATIC_LIB})
   target_link_libraries (orc_protoc INTERFACE ${PROTOC_STATIC_LIB})
 else ()
   target_link_libraries (orc_protoc INTERFACE ${PROTOC_LIBRARY})
