/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

  public static LeafFilter create<Not><Operator>Filter(String colName,
                                              PredicateLeaf.Type type,
                                              Object literal,
                                              TypeDescription colType,
                                              OrcFile.Version version) {
    switch (type) {
      case BOOLEAN:
        return new Long<Not><Operator>(colName, (boolean) literal ? 1L : 0L);
      case DATE:
        //TODO Fix the predicate to be an Int instead of sql.Date
        return new Long<Not><Operator>(colName, ((Date) literal).toLocalDate().toEpochDay());
      case DECIMAL:
        HiveDecimalWritable d = (HiveDecimalWritable) literal;
        assert d.scale() <= colType.getScale();
        if (isDecimalAsLong(version, colType.getPrecision())) {
          return new Long<Not><Operator>(colName, d.serialize64(colType.getScale()));
        } else {
          return new Decimal<Not><Operator>(colName, d);
        }
      case FLOAT:
        return new Float<Not><Operator>(colName, literal);
      case LONG:
        return new Long<Not><Operator>(colName, literal);
      case STRING:
        return new String<Not><Operator>(colName, literal);
      case TIMESTAMP:
        return new Timestamp<Not><Operator>(colName, literal);
      default:
        throw new IllegalArgumentException(String.format("<Not><Operator> does not support type: %s", type));
    }
  }