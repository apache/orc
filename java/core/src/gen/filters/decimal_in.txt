/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.orc.filter.impl;

import org.apache.hadoop.hive.ql.exec.vector.ColumnVector;
import org.apache.hadoop.hive.ql.exec.vector.DecimalColumnVector;
import org.apache.hadoop.hive.serde2.io.HiveDecimalWritable;
import org.apache.orc.filter.impl.LeafFilter;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class <ClassName> extends LeafFilter {

  private final Set<HiveDecimalWritable> inValues;

  protected <ClassName>(String colName, List<Object> values) {
    super(colName);
    inValues = new HashSet<>(values.size());
    for (Object value : values) {
      inValues.add((HiveDecimalWritable) value);
    }
  }

  @Override
  protected boolean allow(ColumnVector v, int rowIdx) {
    return <NotOp>inValues.contains(((DecimalColumnVector) v).vector[rowIdx]);
  }
}
