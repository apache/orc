/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

  // This is generated from create_vector_filter.txt
  public static VectorFilter create<Not>LeafVectorFilter(PredicateLeaf leaf,
                                                     Set<String> colIds,
                                                     TypeDescription readSchema,
                                                     OrcFile.Version version)
    throws FilterFactory.UnSupportedSArgException {
    VectorFilter result;
    colIds.add(leaf.getColumnName());
    TypeDescription colType = readSchema.findSubtype(leaf.getColumnName());

    switch (leaf.getOperator()) {
      case IN:
        result = create<Not>InFilter(leaf.getColumnName(),
                                                  leaf.getType(),
                                                  leaf.getLiteralList(),
                                                  colType,
                                                  version);
        break;
      case EQUALS:
        result = create<Not>EqualsFilter(leaf.getColumnName(),
                                                      leaf.getType(),
                                                      leaf.getLiteral(),
                                                      colType,
                                                      version);
        break;
      case LESS_THAN:
        result = create<Not>LessThanFilter(leaf.getColumnName(),
                                                        leaf.getType(),
                                                        leaf.getLiteral(),
                                                        colType,
                                                        version);
        break;
      case LESS_THAN_EQUALS:
        result = create<Not>LessThanEqualsFilter(leaf.getColumnName(),
                                                              leaf.getType(),
                                                              leaf.getLiteral(),
                                                              colType,
                                                              version);
        break;
      case BETWEEN:
        result = create<Not>BetweenFilter(leaf.getColumnName(),
                                                       leaf.getType(),
                                                       leaf.getLiteralList().get(0),
                                                       leaf.getLiteralList().get(1),
                                                       colType,
                                                       version);
        break;
      case IS_NULL:
        result = new Is<Not>NullFilter(leaf.getColumnName());
        break;
      default:
        throw new FilterFactory.UnSupportedSArgException(String.format("Predicate: %s is not supported", leaf));
    }
    return result;
  }